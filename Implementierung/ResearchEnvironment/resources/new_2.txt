 for userId in users_on_page:
                user = CustomUser.objects.get(id=userId)
                    #checks if a user granted the access permission for this resource
                if userId in readers_list and userId not in resource.readers.values_list('id'):
                    
                    resource.readers.add(user)
                    
                    html_content=render_to_string('AuthorizationManagement/mail/access-granted-mail.html', {'user' : request.user,
                                                                                                    'resource' : resource})                                                               
                    text_content=strip_tags(html_content)
                    email_to = [user.email]
                    email_from=request.user.email
                    msg=EmailMultiAlternatives('Access Permission granted', text_content, email_from,email_to)
                    msg.attach_alternative(html_content, "text/html")
                    msg.send()
                    logger.info("Access permission for '%s' was granted by %s \n" % (resource.name,request.user.username))
                    logger.info("An email was sent from %s to '%s' , Subject: Access permission granted \n" % (request.user.username,user.username))
                    
                    #checks if the access permission  was removed from a user 
                elif userId not in readers_list and userId in  resource.readers.values_list('id'):
                    
                    resource.readers.remove(user)
                    
                    html_content=render_to_string('AuthorizationManagement/mail/access-removed-mail.html', {'user' : request.user,
                                                                                                        'resource' : resource})                                                               
                    text_content=strip_tags(html_content)
                    email_to = [user.email]
                    email_from=request.user.email
                    msg=EmailMultiAlternatives('Access Permission removed', text_content, email_from,email_to)
                    msg.attach_alternative(html_content, "text/html")
                    msg.send()
                    logger.info("Access permission for '%s' was removed by %s from %s \n" % (resource.name,request.user.username,user.username))
                    logger.info("An email was sent from %s to '%s' , Subject: Access permission removed \n" % (request.user.username,user.username))
                
                
                #checks if a user granted the ownership of this resource
                if userId in owners_list and userId not in resource.owners.values_list('id'):
                    
                    user.reader.add(resource)
                    user.__class__=Owner #if the user granted the ownership,it becomes an instance of Owner
                    user.save()
                    owner = user
                    resource.owners.add(owner)
                    
                    html_content=render_to_string('AuthorizationManagement/mail/ownership-granted-mail.html', {'user' : request.user,
                                                                                                        'resource' : resource})                                                               
                    text_content=strip_tags(html_content)
                    email_to = [user.email]
                    email_from=request.user.email
                    msg=EmailMultiAlternatives('Ownership granted', text_content, email_from,email_to)
                    msg.attach_alternative(html_content, "text/html")
                    msg.send()
                    logger.info("ownership for '%s' was granted by %s \n" % (resource.name,request.user.username))
                    logger.info("An email was sent from %s to '%s' , Subject: ownership granted \n" % (request.user.username,user.username))
                    
                #checks if the ownership of this resource was revoked from a user
                elif userId not in owners_list and userId in resource.owners.values_list('id') and len(resource.owners.all() ) > 1:
                    print('+++++++++++++++++++++++++++++++++++++++++++++')
                    user = Owner.objects.get(id=userId)
                    resource.owners.remove(user)
                    user.__class__=CustomUser
                    user.save()
                    user.reader.remove(resource)
                    
                    html_content=render_to_string('AuthorizationManagement/mail/ownership-revoked-mail.html', {'user' : request.user,
                                                                                                        'resource' : resource})                                                               
                    text_content=strip_tags(html_content)
                    email_to = [user.email]
                    email_from=request.user.email
                    msg=EmailMultiAlternatives('Ownership revoked', text_content, email_from,email_to)
                    msg.attach_alternative(html_content, "text/html")
                    msg.send()
                    logger.info("ownership for '%s' was revoked by %s from %s \n" % (resource.name,request.user.username, user.username))
                    logger.info("An email was sent from %s to '%s' , Subject: ownership revoked \n" % (request.user.username,user.username))
                
            return redirect('/profile/my-resources/')